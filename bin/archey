#!/bin/bash

# archey2-osx (https://github.com/jakepez/archey2-osx/)
version="1.0.4"

# test to see if bash supports arrays
arraytest[0]='test' || (echo 'Error: Arrays are not supported in this version of
bash.' && exit 2)

# Detect the packager.
if [ -x $(brew --prefix)/bin/brew ]; then
  detectedpackager=homebrew
elif command -v port >/dev/null; then
  detectedpackager=macports
else
  detectedpackager=none
fi

# Get the command line options
opt_nocolor=f
opt_force_color=f
opt_offline=f
for arg in "$@"
do
  case "${arg}" in
    -p|--packager)
      packager=$detectedpackager
      ;;
    -m|--macports)
      packager=macports
      ;;
    -b|--nocolor)
      opt_nocolor=t
      ;;
    -c|--color)
      opt_nocolor=f
      opt_force_color=t
      ;;
    -o|--offline)
        opt_offline=t
        ;;
    -l|--localip)
		opt_localip=t
      ;;
    -h|--help)
      echo "Archey2 for MacOS X $version"
      echo
      echo "Usage: $0 [options]"
      echo
      echo "  -p --packager  Use auto detected package system (default packager: ${detectedpackager})."
      echo "  -m --macports  Force use MacPorts as package system."
      echo "  -b --nocolor   Turn color off."
      echo "  -c --color     Force the color on (overrides --nocolor)."
      echo "  -o --offline   Disable the IP address check."
      echo "  -l --localip   Show local IP adddress."
      echo "  -h --help      Show help."
      exit 0
      ;;
    *)
      echo "Unknown argument: $1" 1>&2
      echo "For help, use: $0 --help" 1>&2
      exit 1
      ;;
  esac
done

# System Variables
termcols=$(tput cols)
termlines=$(tput lines)
cutcols="35"

if [ "$termcols" -gt "100" ]; then
    cutcols="80"
fi

user=$(whoami)
hostname=$(hostname | sed 's/.local//g')

# Lookup full model name
checkmodel="$(sysctl -n hw.model)"
model=$checkmodel
storedmodel=""
modelfile="${HOME}/.archey-model"

if [ -a "$modelfile" ]; then
  storedmodel=$(head -n 1 $modelfile)
fi

if [ "$checkmodel" == "$storedmodel" ]; then
    model=$(tail -n -1 $modelfile)
else
  if [[ $(sysctl -n machdep.cpu.brand_string) == Apple* ]]; then
    model=$(/usr/libexec/PlistBuddy -c 'Print :0:product-name' /dev/stdin <<< "$(ioreg -arc IOPlatformDevice -k product-name)" 2> /dev/null | tr -cd '[:print:]')
    printf '%s\n' "$checkmodel" "$model" > "$modelfile"
  else
    if model=$(curl -sS --max-time 5 https://support-sp.apple.com/sp/product?cc=$(
  system_profiler SPHardwareDataType \
    | awk '/Serial/ {print $4}' \
    | cut -c 9- | cut -c1-20
      ) | sed 's|.*<configCode>\(.*\)</configCode>.*|\1|'); then
            printf '%s\n' "$checkmodel" "$model" > "$modelfile"
    fi
  fi
fi

# External ip v4 and v6 address detection
if [[ "${opt_offline}" = f ]]; then
    ipfile4="${HOME}/.archey-ipv4"
    if [ -a "$ipfile4" ] && test `find "$ipfile4" -mmin -360`; then
        while read -r line; do
            V4="$line"
        done < "$ipfile4"
    else
        if V4=$(curl -sS --max-time 5 https://myip.dnsomatic.com 2>/dev/null); then
            echo $V4 > "$ipfile4"
        fi
    fi
    V6=$(ifconfig |grep inet6|grep temporary|grep -v deprecated|cut -d " " -f 2|sed 's/\r$//')
fi

# Local ip detection 

if [[ "${opt_localip}" = t ]]; then
	# Get the interface used for the default route
	activeadapter=$(route -n get 0.0.0.0 | awk '/interface: / {print $2}')
	# Now get the IP address assigned to that interface
	localip=$(ifconfig ${activeadapter} | awk '/inet / {print $2}')
fi

# OS version and build detection

osx_version="$(sw_vers -productVersion)"
osx_build="$(sw_vers -buildVersion)"

# define OS Short Version

codename="$(awk '/SOFTWARE LICENSE AGREEMENT FOR macOS/' '/System/Library/CoreServices/Setup Assistant.app/Contents/Resources/en.lproj/OSXSoftwareLicense.rtf' | awk -F 'FOR ' '{print $NF}' | awk '{print substr($0, 0, length($0)-1)}')"

cores="$(sysctl -n hw.logicalcpu_max)"

Date=$(date)
distro="$codename $osx_version ($osx_build)"
kernel="$(uname) $(uname -r)"
shell="$SHELL"
terminal="$TERM ${TERM_PROGRAM//_/ }"
cpu="$(sysctl -n machdep.cpu.brand_string | sed 's/(R)//g' | sed 's/(TM)//g' | sed 's/CPU @ //g') x ${cores} cores"
battery=$(ioreg -c AppleSmartBattery -r | awk '$1~/Capacity/{c[$1]=$3} END{OFMT="%.2f%"; max=c["\"MaxCapacity\""]; if (max>0) { print 100*c["\"CurrentCapacity\""]/max;} }')

# removes (R) and (TM) from the CPU name so it fits in a standard 80 window
cpu=$(echo "$cpu" | awk '$1=$1' | sed 's/([A-Z]\{1,2\})//g')

mem_total="$(( $(sysctl -n hw.memsize) / 1024 ** 3  ))" #GB
mem_pagesize="$(vm_stat | awk '/page size of / { print $8}')"
mem_wired="$(vm_stat | awk '/Pages wired down/ { print $4 }')"
mem_active="$(vm_stat | awk '/Pages active/ { printf $3 }')"
mem_inactive="$(vm_stat | awk '/Pages inactive/ { printf $3 }')"
mem_compressor="$(vm_stat | awk '/Pages stored in compressor/ { printf $5 }')"
mem_compressed="$(vm_stat | awk '/Pages occupied by compressor/ { printf $5 }')"
mem_free="$(vm_stat | awk '/Pages free/ { printf $3 }')"
#mem_used="$(((${mem_wired//.} + ${mem_active//.} + ${mem_inactive//.} - ${mem_compressor//.} + ${mem_compressed//.}) * ${mem_pagesize} / 1024**2))" #MB
mem_used="$(((${mem_wired//.} + ${mem_active//.} + ${mem_inactive//.}) * ${mem_pagesize} / 1024**2))" #MB
mem_percent="$(((${mem_used}/((${mem_total})*1024))))"
mem="${mem_used}MB used of ${mem_total}GB"

# Disk space detection
if (( ${osx_version%%.*} >= 11 )) ; then
  disk=$(df | grep -i /System/Volumes/Data | head -1 | awk '{print $5}')
else
  disk=$(df | head -2 | tail -1 | awk '{print $5}')
fi

# GPU
system_profiler SPDisplaysDataType 1> /tmp/grap.plist 2>/dev/null

# Display
displayNum=$(cat -n /tmp/grap.plist | grep Displays | grep -v Graphics | awk '{print $1}')
((displayNum++))
displayModel=$(cat /tmp/grap.plist | sed -n ${displayNum}p | awk '{print $1}' | sed 's/://g')

# main resolution
resolution="$(cat /tmp/grap.plist | grep Resolution | awk 'NF+=1' | sed 's/Resolution://g' | cut -b 2- | sed -e 's/, /\n/g' | sed -n 1p | sed 's/          //g'|awk '{$1=$1};1')"
vram="$(cat /tmp/grap.plist | grep VRAM | awk -F': ' '{print "(" $2 "), "}')"
gpu="$(cat /tmp/grap.plist | awk -F': ' '/^\ *Chipset Model:/ {printf $2}') ${vram}${resolution}"

# extension monitor resolution
displayext="$(cat /tmp/grap.plist | grep Resolution | awk 'NF+=1' | sed 's/Resolution://g' | cut -b 2- | sed -e 's/, /\n/g' | sed -n 2p | sed 's/          //g')"
if [[ -z $displayext ]] ; then 
  displayext=$resolution
else
  displayext="$resolution; $displayext"
fi

# Uptime
boot="$(sysctl -n kern.boottime)"
boot="${boot/'{ sec = '}"
boot="${boot/,*}"
now="$(date +%s)"
seconds="$((now - boot))"
days="$((seconds / 60 / 60 / 24)) days"
hours="$((seconds / 60 / 60 % 24)) hours"
mins="$((seconds / 60 % 60)) minutes"

# Format the days, hours and minutes.
strip_date() {
  case "$1" in
    "0 "*) unset "${1/* }" ;;
    "1 "*) printf "%s" "${1/s}" ;;
    *)     printf "%s" "$1" ;;
  esac
}

days="$(strip_date "$days")"
hours="$(strip_date "$hours")"
mins="$(strip_date "$mins")"

uptime="${days:+$days, }${hours:+$hours, }${mins}"
uptime="${uptime%', '}"
uptime="${uptime:-${seconds} seconds}"

# Set up colors if:
# * stdout is a tty
# * the user hasn't turned it off
# * or if we're forcing color
if [[ ( -t 1  && "${opt_nocolor}" = f) || "${opt_force_color}" = t ]]
then
  RED=$(tput       setaf 1 2>/dev/null)
  GREEN=$(tput     setaf 2 2>/dev/null)
  YELLOW=$(tput    setaf 3 2>/dev/null)
  BLUE=$(tput      setaf 4 2>/dev/null)
  PURPLE=$(tput    setaf 5 2>/dev/null)
  textColor=$(tput setaf 6 2>/dev/null)
  normal=$(tput    sgr0 2>/dev/null)
fi

# Detect packages installed

case "${packager}" in
  homebrew)
    packagehandler=$(brew list -1 | wc -l | awk '{print $1 }')
    ;;
  macports)
    packagehandler=$(port installed | wc -l | awk '{print $1 }')
    ;;
  *)
    packagehandler=0
    ;;
esac

# Store machine info

fieldlist[${#fieldlist[@]}]="${textColor}User     :${normal} ${user}${normal}"
fieldlist[${#fieldlist[@]}]="${textColor}Hostname :${normal} ${hostname}${normal}"
fieldlist[${#fieldlist[@]}]="${textColor}Model    :${normal} ${model:0:cutcols}${normal}"
fieldlist[${#fieldlist[@]}]="${textColor}Distro   :${normal} ${distro}${normal}"
fieldlist[${#fieldlist[@]}]="${textColor}Kernel   :${normal} ${kernel}${normal}"
fieldlist[${#fieldlist[@]}]="${textColor}Uptime   :${normal} ${uptime}${normal}"
fieldlist[${#fieldlist[@]}]="${textColor}Shell    :${normal} ${shell}${normal}"
fieldlist[${#fieldlist[@]}]="${textColor}Time     :${normal} ${Date}${normal}"
if [ ${packagehandler} -ne 0 ]; then
  fieldlist[${#fieldlist[@]}]="${textColor}Packages :${normal} ${packagehandler}${normal}"
fi
fieldlist[${#fieldlist[@]}]="${textColor}CPU      :${normal} ${cpu}${normal}"
fieldlist[${#fieldlist[@]}]="${textColor}Memory   :${normal} ${mem}${normal}"
fieldlist[${#fieldlist[@]}]="${textColor}Disk     :${normal} ${disk}${normal}"
if [[ ! -z $battery ]]; then
  fieldlist[${#fieldlist[@]}]="${textColor}Battery  :${normal} ${battery}%${normal}"
fi
fieldlist[${#fieldlist[@]}]="${textColor}Terminal :${normal} ${terminal}${normal}"
fieldlist[${#fieldlist[@]}]="${textColor}Graphics :${normal} ${gpu:0:cutcols}${normal}"
fieldlist[${#fieldlist[@]}]="${textColor}Display  :${normal} ${displayext:0:cutcols}${normal}"
# Texts had to be shortend to fit in 80 window
if [ "${opt_offline}" = f ]; then
  if [ ! -z "$V4" ]; then
    fieldlist[${#fieldlist[@]}]="${textColor}IPv4     :${normal} ${V4}"
  fi
  if [ ! -z "$V6" ]; then
    fieldlist[${#fieldlist[@]}]="${textColor}IPv6     :${normal} ${V6}"
  fi
fi
if [ "${opt_localip}" = t ]; then
  fieldlist[${#fieldlist[@]}]="${textColor}Local IP :${normal} ${localip}${normal}"
fi

logofile=${ARCHEY_LOGO_FILE:-"${HOME}/.config/archey-logo"}
if [ -a "$logofile" ]
  then
  source "$logofile"
else

  # Print apple and machine info

  i=0 # Field Count variable
  if [ "${#fieldlist[@]}" -gt "16" ]; then
    printf '%s\n' "${GREEN#  }                               ${fieldlist[((i++))]}"
  fi

    printf '%s\n' "${GREEN#  }                               ${fieldlist[((i++))]}"
    printf '%s\n' "${GREEN#  }                 ###           ${fieldlist[((i++))]}"
    printf '%s\n' "${GREEN#  }               ####            ${fieldlist[((i++))]}"
    printf '%s\n' "${GREEN#  }               ###             ${fieldlist[((i++))]}"
    printf '%s\n' "${GREEN#  }       #######    #######      ${fieldlist[((i++))]}"
    printf '%s\n' "${YELLOW# }     ######################    ${fieldlist[((i++))]}"
    printf '%s\n' "${YELLOW# }    #####################      ${fieldlist[((i++))]}"
    printf '%s\n' "${RED#    }    ####################       ${fieldlist[((i++))]}"
    printf '%s\n' "${RED#    }    ####################       ${fieldlist[((i++))]}"
    printf '%s\n' "${RED#    }    #####################      ${fieldlist[((i++))]}"
    printf '%s\n' "${PURPLE# }     ######################    ${fieldlist[((i++))]}"
    printf '%s\n' "${PURPLE# }      ####################     ${fieldlist[((i++))]}"
    printf '%s\n' "${BLUE#   }        ################       ${fieldlist[((i++))]}"
    printf '%s\n' "${BLUE#   }         ####     #####        ${fieldlist[((i++))]}"

    while [ "${#fieldlist[@]}" -ge "$i" ]; do
      printf '%s\n' "${BLUE#   }                               ${fieldlist[((i++))]}"
    done
fi
